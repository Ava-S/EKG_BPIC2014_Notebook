{
  "name": "BPIC17",
  "version": "1.0.0",
  "records": [
    "(record:EventRecord {eventId, timestamp, activity, lifecycle, eventOrigin, action}",
    "(record:ApplicationRecord {case})",
    "(record:ApplicationDetailRecord WHERE record.eventOrigin = 'Application' {case, applicationType, requestedAmount, OPTIONAL loanGoal})",
    "(record:WorkflowRecord {case})",
    "(record:WorkflowCorrRecord  WHERE record.eventOrigin = 'Workflow' {case})",
    "(record:OfferRecord:OfferEventIdRecord WHERE record.eventOrigin = 'Offer' AND record.eventId STARTS WITH 'Offer_' {eventId, case, creditScore, firstWithdrawalAmount, monthlyCost, numberOfTerms, offeredAmount})",
    "(record:OfferRecord:OfferIdRecord WHERE record.eventOrigin = 'Offer' AND record.eventId STARTS WITH 'OfferState_' {offerId})",
    "(record:ResourceRecord {resourceId})"
  ],
  "nodes": [
    {
      "type": "Event",
      "constructor": [
        {
          "merge": false,
          "prevalent_record": "(record:EventRecord WHERE record.eventOrigin IN ['Application', 'Offer'])",
          "result": "(e:Event {IDENTIFIER id: record.eventId, timestamp:record.timestamp, activity:record.activity})"
        },
        {
          "merge": false,
          "prevalent_record": "(record:EventRecord WHERE record.eventOrigin IN ['Workflow'])",
          "result": "(e:Event {IDENTIFIER id: record.eventId, timestamp:record.timestamp, activity:record.activity, lifecycle:record.lifecycle})"
        }
      ]
    },
    {
      "type": "EventType",
      "constructor": [
        {
          "merge": true,
          "prevalent_record": "(record:EventRecord WHERE record.eventOrigin IN ['Application', 'Offer'])",
          "result": "(et:EventType {IDENTIFIER eventType:record.activity})",
          "infer_observed": false
        },
        {
          "merge": true,
          "prevalent_record": "(record:EventRecord WHERE record.eventOrigin IN ['Workflow'])",
          "result": "(et:EventType {IDENTIFIER eventType:record.activity+'_'+record.lifecycle, activity: record.activity, lifecycle: record.lifecycle})",
          "infer_observed": false
        }
      ]
    },
    {
      "type": "Application",
      "constructor": [
        {
          "merge": true,
          "prevalent_record": "(record:ApplicationDetailRecord)",
          "result": "(a:Application {IDENTIFIER id: record.case, type:record.applicationType, requestedAmount: record.requestedAmount, OPTIONAL loanGoal: record.loanGoal})",
          "infer_corr_from_event_record": true
        },
        {
          "merge": true,
          "prevalent_record": "(record:ApplicationRecord)",
          "result": "(a:Application {IDENTIFIER id: record.case})",
          "infer_corr_from_event_record": false
        }
      ]
    },
    {
      "type": "ObjectType",
      "constructor": [
        {
          "merge": true,
          "prevalent_record": "(record:ApplicationDetailRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'Application'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:ApplicationRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'Application'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:WorkflowCorrRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'Workflow'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:WorkflowRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'Workflow'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:OfferEventIdRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'Offer'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:OfferIdRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'Offer'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:ResourceRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'Resource'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:EventRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'CaseAWO'})"
        }
      ]
    },
    {
      "type": "ReifiedObjectType",
      "include": true,
      "constructor": [
        {
          "merge": true,
          "prevalent_record": "(record:ApplicationRecord:OfferRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'CaseAO'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:ApplicationRecord:WorkflowRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'CaseAW'})"
        },
        {
          "merge": true,
          "prevalent_record": "(record:WorkflowRecord:OfferRecord)",
          "result": "(ot:ObjectType {IDENTIFIER objectType: 'CaseWO'})"
        }
      ]
    },
    {
      "type": "Workflow",
      "constructor": [
        {
          "merge": true,
          "prevalent_record": "(record:WorkflowCorrRecord)",
          "result": "(w:Workflow {IDENTIFIER id: record.case})",
          "infer_corr_from_event_record": true
        },
        {
          "merge": true,
          "prevalent_record": "(record:WorkflowRecord)",
          "result": "(w:Workflow {IDENTIFIER id: record.case})",
          "infer_corr_from_event_record": false
        }
      ]
    },
    {
      "type": "Offer",
      "constructor": [
        {
          "merge": true,
          "prevalent_record": "(record:OfferEventIdRecord)",
          "result": "(o:Offer {IDENTIFIER id: record.eventId, OPTIONAL creditScore: record.creditScore, OPTIONAL firstWithdrawalAmount: record.firstWithdrawalAmount, OPTIONAL monthlyCost: record.monthlyCost, OPTIONAL numberOfTerms: record.numberOfTerms, OPTIONAL offeredAmount: record.offeredAmount})",
          "infer_corr_from_event_record": true
        },
        {
          "merge": true,
          "prevalent_record": "(record:OfferIdRecord)",
          "result": "(o:Offer {IDENTIFIER id: record.offerId})",
          "infer_corr_from_event_record": true
        }
      ]
    },
    {
      "type": "Resource",
      "constructor": [
        {
          "merge": true,
          "prevalent_record": "(record:ResourceRecord)",
          "result": "(r:Resource {IDENTIFIER id: record.resourceId})",
          "infer_corr_from_event_record": true
        }
      ]
    },
    {
      "include": true,
      "type": "CaseAWO",
      "constructor": [
        {
          "merge": true,
          "prevalent_record": "(record:EventRecord)",
          "result": "(case_awo:CaseAWO {IDENTIFIER id: record.case)}",
          "infer_corr_from_event_record": true
        }
      ]
    }
  ],
  "relations": [
    {
      "include": true,
      "type": "CaseAO",
      "constructor": {
        "prevalent_record": "(record:ApplicationRecord:OfferRecord)",
        "from_node": "(o: Offer)",
        "to_node": "(a: Application)",
        "result": "(o) - [:CaseAO {id:a.id+\"X\"+o.id}] -> (a)",
        "infer_corr_from_reified_parents": true
      },
      "model_as_node": true
    },
    {
      "include": true,
      "type": "CaseAW",
      "constructor": {
        "prevalent_record": "(:ApplicationRecord:WorkflowRecord)",
        "from_node": "(w: Workflow)",
        "to_node": "(a: Application)",
        "result": "(w) - [:CaseAW {id:w.id+\"X\"+a.id}] -> (a)",
        "infer_corr_from_reified_parents": true
      },
      "model_as_node": true
    },
    {
      "include": true,
      "type": "CaseWO",
      "constructor": {
        "prevalent_record": "(:WorkflowRecord:OfferRecord)",
        "from_node": "(o: Offer)",
        "to_node": "(w: Workflow)",
        "result": "(o) - [:CaseWO {id:o.id+\"X\"+w.id}] -> (w)",
        "infer_corr_from_reified_parents": true
      },
      "model_as_node": true
    },
    {
      "include": true,
      "type": "FROM",
      "constructor": [
        {
          "nodes": [
            "(ot_from:ObjectType {objectType:'Offer'})",
            "(ot_reified:ObjectType {objectType:'CaseAO'})"
          ],
          "from_node": "(ot_from:ObjectType)",
          "to_node": "(ot_reified:ObjectType)",
          "result": "(ot_from) - [:FROM] -> (ot_reified)"
        },
        {
          "nodes": [
            "(ot_from:ObjectType {objectType:'Offer'})",
            "(ot_reified:ObjectType {objectType:'CaseWO'})"
          ],
          "from_node": "(ot_from:ObjectType)",
          "to_node": "(ot_reified:ObjectType)",
          "result": "(ot_from) - [:FROM] -> (ot_reified)"
        },
        {
          "nodes": [
            "(ot_from:ObjectType {objectType:'Workflow'})",
            "(ot_reified:ObjectType {objectType:'CaseAW'})"
          ],
          "from_node": "(ot_from:ObjectType)",
          "to_node": "(ot_reified:ObjectType)",
          "result": "(ot_from) - [:FROM] -> (ot_reified)"
        }
      ]
    },
    {
      "include": true,
      "type": "TO",
      "constructor": [
        {
          "nodes": [
            "(ot_to:ObjectType {objectType:'Application'})",
            "(ot_reified:ObjectType {objectType:'CaseAO'})"
          ],
          "from_node": "(ot_reified:ObjectType)",
          "to_node": "(ot_to:ObjectType)",
          "result": "(ot_reified) - [:TO] -> (ot_to)"
        },
        {
          "nodes": [
            "(ot_to:ObjectType {objectType:'Workflow'})",
            "(ot_reified:ObjectType {objectType:'CaseWO'})"
          ],
          "from_node": "(ot_reified:ObjectType)",
          "to_node": "(ot_to:ObjectType)",
          "result": "(ot_reified) - [:TO] -> (ot_to)"
        },
        {
          "nodes": [
            "(ot_to:ObjectType {objectType:'Application'})",
            "(ot_reified:ObjectType {objectType:'CaseAW'})"
          ],
          "from_node": "(ot_reified:ObjectType)",
          "to_node": "(ot_to:ObjectType)",
          "result": "(ot_reified) - [:TO] -> (ot_to)"
        }
      ]
    },
    {
      "type": "INSTANCE_OF",
      "constructor": [
        {
          "prevalent_record": "(:EventRecord)",
          "from_node": "(e:Event)",
          "to_node": "(et:EventType)",
          "result": "(e) - [:INSTANCE_OF] -> (et)"
        },
        {
          "nodes": [
            "(o:Application)",
            "(ot:ObjectType {objectType:'Application'})"
          ],
          "from_node": "(o: Application)",
          "to_node": "(ot: ObjectType)",
          "result": "(o) - [:INSTANCE_OF] -> (ot)"
        },
        {
          "nodes": [
            "(o:Workflow)",
            "(ot:ObjectType {objectType:'Workflow'})"
          ],
          "from_node": "(o: Workflow)",
          "to_node": "(ot: ObjectType)",
          "result": "(o) - [:INSTANCE_OF] -> (ot)"
        },
        {
          "nodes": [
            "(o:Offer)",
            "(ot:ObjectType {objectType:'Offer'})"
          ],
          "from_node": "(o: Offer)",
          "to_node": "(ot: ObjectType)",
          "result": "(o) - [:INSTANCE_OF] -> (ot)"
        },
        {
          "nodes": [
            "(o:Resource)",
            "(ot:ObjectType {objectType:'Resource'})"
          ],
          "from_node": "(o: Resource)",
          "to_node": "(ot: ObjectType)",
          "result": "(o) - [:INSTANCE_OF] -> (ot)"
        },
        {
          "nodes": [
            "(o:CaseAWO)",
            "(ot:ObjectType {objectType:'CaseAWO'})"
          ],
          "from_node": "(o: CaseAWO)",
          "to_node": "(ot: ObjectType)",
          "result": "(o) - [:INSTANCE_OF] -> (ot)"
        },
        {
          "nodes": [
            "(o:CaseAO)",
            "(ot:ObjectType {objectType:'CaseAO'})"
          ],
          "from_node": "(o: CaseAO)",
          "to_node": "(ot: ObjectType)",
          "result": "(o) - [:INSTANCE_OF] -> (ot)"
        },
        {
          "nodes": [
            "(o:CaseAW)",
            "(ot:ObjectType {objectType:'CaseAW'})"
          ],
          "from_node": "(o: CaseAW)",
          "to_node": "(ot: ObjectType)",
          "result": "(o) - [:INSTANCE_OF] -> (ot)"
        },
        {
          "nodes": [
            "(o:CaseWO)",
            "(ot:ObjectType {objectType:'CaseWO'})"
          ],
          "from_node": "(o: CaseWO)",
          "to_node": "(ot: ObjectType)",
          "result": "(o) - [:INSTANCE_OF] -> (ot)"
        }
      ]
    }
  ]
}
